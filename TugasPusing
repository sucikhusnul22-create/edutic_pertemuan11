#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <LiquidCrystal_I2C.h>

// ==================== KONFIGURASI WIFI & MQTT ====================
const char* ssid = "janganlupawifi";
const char* password = "jangandikosongi";
const char* mqtt_server = "broker.emqx.io";

// ==================== TOPIC ====================
const char* TOPIC_JSON    = "kel4/xy_md02";
const char* TOPIC_CTRL_R1 = "kel4/relay1";
const char* TOPIC_CTRL_R2 = "kel4/relay2";

// ==================== OBJEK ====================
WiFiClient espClient;
PubSubClient mqtt(espClient);
LiquidCrystal_I2C lcd(0x27, 16, 2);

float temperature = 0;
String relay1Status = "OFF";
String relay2Status = "OFF";

#define TOUCH1 4
#define TOUCH2 27
unsigned long lastTouch1 = 0;
unsigned long lastTouch2 = 0;
const unsigned long debounceDelay = 400;

// ==================== WIFI ====================
void setup_wifi() {
  Serial.printf("Menghubungkan ke %s", ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print("."); }
  Serial.println("\nWiFi Terhubung!");
  Serial.print("IP: "); Serial.println(WiFi.localIP());
}

// ==================== CALLBACK MQTT ====================
void callback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0';
  String msg = String((char*)payload);

  if (strcmp(topic, TOPIC_JSON) == 0) {
    StaticJsonDocument<256> doc;
    if (deserializeJson(doc, msg) == DeserializationError::Ok) {
      temperature = doc["temperature"];
      relay1Status = (const char*)doc["relay1"];
      relay2Status = (const char*)doc["relay2"];

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.printf("Suhu: %.1f%cC", temperature, 223);
      lcd.setCursor(0, 1);
      lcd.printf("R1:%s R2:%s", relay1Status.c_str(), relay2Status.c_str());

      Serial.printf("Temp: %.1fÂ°C | R1:%s | R2:%s\n",
                    temperature, relay1Status.c_str(), relay2Status.c_str());
    }
  }
}

// ==================== RECONNECT MQTT ====================
void reconnect() {
  while (!mqtt.connected()) {
    Serial.print("Menghubungkan MQTT...");
    String clientId = "ESP32_LCDKel4_" + String(random(0xffff), HEX);
    if (mqtt.connect(clientId.c_str())) {
      Serial.println("Terhubung ke broker!");
      mqtt.subscribe(TOPIC_JSON);
    } else {
      Serial.printf("Gagal, rc=%d. Coba lagi...\n", mqtt.state());
      delay(5000);
    }
  }
}

// ==================== SETUP ====================
void setup() {
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();
  lcd.print("LCD Subscriber");
  delay(1000);
  lcd.clear();

  pinMode(TOUCH1, INPUT);
  pinMode(TOUCH2, INPUT);

  setup_wifi();
  mqtt.setServer(mqtt_server, 1883);
  mqtt.setCallback(callback);
}

// ==================== LOOP ====================
void loop() {
  if (!mqtt.connected()) reconnect();
  mqtt.loop();

  // ==== Touch Sensor 1 ====
  if (touchRead(TOUCH1) < 500 && millis() - lastTouch1 > debounceDelay) {
    lastTouch1 = millis();
    mqtt.publish(TOPIC_CTRL_R1, relay1Status == "ON" ? "0" : "1");
    Serial.println("Touch1: Kirim toggle Relay1");
  }

  // ==== Touch Sensor 2 ====
  if (touchRead(TOUCH2) < 500 && millis() - lastTouch2 > debounceDelay) {
    lastTouch2 = millis();
    mqtt.publish(TOPIC_CTRL_R2, relay2Status == "ON" ? "0" : "1");
    Serial.println("Touch2: Kirim toggle Relay2");
  }
}
